from _typeshed import Incomplete
from typing import Any, TypedDict

from requests import Request, Response

from .client import EventParameters

class BatchBuilder:
    entries: Incomplete
    def __init__(self) -> None: ...
    def upsert_event(self, calendar_id: str, event: EventParameters): ...
    def delete_event(self, calendar_id: str, event_id: str): ...
    def delete_external_event(self, calendar_id: str, event_uid: str): ...
    def add_entry(self, method: str, relative_url: str, data: str) -> None: ...
    def build(self): ...
    def delete(self, relative_url: str, data: dict[str, Any]) -> None: ...
    def post(self, relative_url: str, data: dict[str, Any]) -> None: ...

class BatchEntry:
    request: Request
    response: Response
    def __init__(self, request: Request, response: Response) -> None: ...
    def status(self) -> int: ...


class BatchEntryRequestToDict(TypedDict):
    method: str
    relative_url: str
    data: dict[str, Any]

class BatchEntryRequest:
    method: str
    relative_url: str
    data: dict[str, Any]
    def __init__(self, method: str, relative_url: str, data: dict[str, Any]) -> None: ...
    def to_dict(self) -> BatchEntryRequestToDict: ...

class BatchResponse:
    entries: list[BatchEntry]
    def __init__(self, entries: list[BatchEntry]) -> None: ...
    def errors(self) -> list[BatchEntry]: ...
    def has_errors(self) -> bool: ...
